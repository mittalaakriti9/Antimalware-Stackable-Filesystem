/*
 * Copyright (c) 1998-2014 Erez Zadok
 * Copyright (c) 2009	   Shrikar Archak
 * Copyright (c) 2003-2014 Stony Brook University
 * Copyright (c) 2003-2014 The Research Foundation of SUNY
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#include "amfs.h"
#include <linux/string.h>
#include "header.h"
#include <linux/xattr.h>
#include <linux/list.h>


static int return_attribute_status(struct file *file,char *arr)
{
	
	int rc;
	rc=vfs_getxattr(file->f_path.dentry,AMFS_XATTR_NAME_STATUS,arr,4);
	return rc;

}

static int return_attribute_version(struct file *file,int *p)
{

	int rc;
	rc=vfs_getxattr(file->f_path.dentry,AMFS_XATTR_NAME_VERSION,*p,sizeof(int));
	return rc;
}



static int check_read_buffer(struct file *file, char *buf,int buf_size)
{
	printk("\nI am in kernel buffer\n");
	struct pattern *head;
	struct pattern *tmp;
	struct amfs_sb_info *sbi=NULL;
	char *ker_buf=NULL;
	char attr[4];
	mm_segment_t ofs;
	int rc;
	int ret=1;
	int vnum;
	
	ker_buf=kzalloc(buf_size,GFP_KERNEL);
	if(copy_from_user(ker_buf,buf,buf_size)){
		ret=0;
		goto out;
	}
	
	printk("Kernel Buffer is: %s\n",ker_buf);
	sbi=AMFS_SB(file->f_path.dentry->d_sb);
        head=sbi->pat;
	vnum=sbi->version_no;

	list_for_each_entry(tmp,&head->list,list){		
		if(strnstr(ker_buf,tmp->pattr,buf_size)){
			ofs=get_fs();
			set_fs(get_ds());
			rc=vfs_setxattr(file->f_path.dentry,AMFS_XATTR_NAME_STATUS,AMFS_XATTR_VALUE1,4,0);			
			if(rc!=0){
				printk("\nAttribute value not set\n");
				ret=0;
				goto out;
			}
			rc=vfs_getxattr(file->f_path.dentry,AMFS_XATTR_NAME_VERSION,num,0)
			if(rc<0){
				rc=vfs_setxattr(file->f_path.dentry,AMFS_XATTR_NAME_VERSION,1,sizeof(int),0);
				if(rc!=0){
                                        printk("\nAttribute value not set\n");
                                        ret=0;
                                        goto out;
                                }
			}
			else{
				rc=vfs_setxattr(file->f_path.dentry,AMFS_XATTR_NAME_VERSION,vnum,sizeof(int),0);
				if(rc!=0){
					printk("\nAttribute value not set\n");
					ret=0;
					goto out;
				}
			}
			set_fs(ofs);
			printk("Atrribute vlaue: %s\n",attr);
			ret=0;
			printk("Virus Found\n");
			printk("Virus is: %s\n",tmp->pattr);
			break;
		}
	}
	rc=vfs_setxattr(file->f_path.dentry,AMFS_XATTR_NAME_STATUS,AMFS_XATTR_VALUE2,4,0);
	if(rc!=0){
		printk("Attribute value not set\n");
		goto out;
	}
		

	
out:	if(ker_buf)
		kfree(ker_buf);
	return ret;

}

static ssize_t amfs_read(struct file *file, char __user *buf,
			   size_t count, loff_t *ppos)
{
	
	int err;
	int ret1;
	int ret=-1;
	char *arr=NULL;
	struct file *lower_file;
	struct dentry *dentry = file->f_path.dentry;
	int flag=0;	
	int vnum,num;
	struct amfs_sb_info *sbi;

	printk("I am in amfs_read\n");
	arr=kmalloc(4,GFP_KERNEL);
	if(!arr){
		err=-ENOMEM;
	}

	sbi=AMFS_SB(file->f_path.dentry->d_sb);
	vnum=sbi->version_no;

	lower_file = amfs_lower_file(file);
	
	
	ret1=return_file_attribute_status(file,arr);
	if(ret1<0)
	{
		flag=1;
	}
	else{
		ret2=return_file_attribute_version(file,&num);
		if((strcmp(arr,"BAD"))==0 &&(vnum==num))
			flag=2;
		if(((strcmp(arr,"BAD"))==0 &&(vnum!=num ))||((strcmp(arr,"GODF"))==0))
			flag=1;
		
	}
	
	err = vfs_read(lower_file, buf, count, ppos);	
	
	if(err>0 && flag==1){
		ret=check_read_buffer(file,buf,err);
	}

	/* update our inode atime upon a successful lower read */
	if (err >= 0){
		
		fsstack_copy_attr_atime(dentry->d_inode,
					file_inode(lower_file));
	}
			
	if(ret==0||flag==2){

		err=-EBADF;
	}

	if(arr)
		kfree(arr);

	return err;
}

static ssize_t amfs_write(struct file *file, const char __user *buf,
			    size_t count, loff_t *ppos)
{
	printk("I am in amfs_write\n");
	int err;

	struct file *lower_file;
	struct dentry *dentry = file->f_path.dentry;

	lower_file = amfs_lower_file(file);
	err = vfs_write(lower_file, buf, count, ppos);
	/* update our inode times+sizes upon a successful lower write */
	if (err >= 0) {
		fsstack_copy_inode_size(dentry->d_inode,
					file_inode(lower_file));
		fsstack_copy_attr_times(dentry->d_inode,
					file_inode(lower_file));
	}

	return err;
}

static int amfs_readdir(struct file *file, struct dir_context *ctx)
{
	int err;
	struct file *lower_file = NULL;
	struct dentry *dentry = file->f_path.dentry;

	lower_file = amfs_lower_file(file);
	err = iterate_dir(lower_file, ctx);
	file->f_pos = lower_file->f_pos;
	if (err >= 0)		/* copy the atime */
		fsstack_copy_attr_atime(dentry->d_inode,
					file_inode(lower_file));
	return err;
}

static long amfs_unlocked_ioctl(struct file *file, unsigned int cmd,
				  unsigned long arg)
{
	long err = -ENOTTY;
	struct file *lower_file;
	char *tmp=NULL;
	struct pattern *head,*ptr,*test=NULL;	
	struct amfs_sb_info *sbi=NULL; 
	int size;
	struct list_head *pos,*q;
	int flag=0;

//	tmp=kmalloc(sizeof(arg),GFP_KERNEL);
	
	sbi=AMFS_SB(file->f_path.dentry->d_sb);
        head=sbi->pat;

	lower_file = amfs_lower_file(file);

	/* XXX: use vfs_ioctl if/when VFS exports it */
	if (!lower_file || !lower_file->f_op)
		goto out;
//	printk("before switch\n");

	if(cmd==AMFS_ADD_PATTERNS||cmd==AMFS_DEL_PATTERNS||cmd==AMFS_LIST_PATTERNS){
		switch(cmd){
			case AMFS_ADD_PATTERNS:
				size=strlen((char *)arg);
				tmp=(char *)kmalloc(size,GFP_KERNEL);
				if(!tmp){
					err=-ENOMEM;
					goto out;
				}
				if(copy_from_user(tmp,(char*)arg,size)){
					err=-ENOMEM;
					goto out;
				}
				ptr=kmalloc(sizeof(struct pattern),GFP_KERNEL);
				if(!ptr){
                                	err=-ENOMEM;
                                	goto out;
                        	}	
                        	ptr->pattr=kmalloc(strlen(tmp)+1,GFP_KERNEL);
				if(!ptr->pattr){
                                	err=-ENOMEM;
                                	goto out;
                        	}
                        	strcpy(ptr->pattr,tmp);
				ptr->pattr[size]='\0';
				list_for_each_entry(test,&(head->list),list){
					if((strcmp(test->pattr,ptr->pattr))==0){
						flag=1;
                                        }
				}
				if(flag==0)
					list_add_tail(&(ptr->list),&(head->list));	
	
				
				list_for_each_entry(test,&(head->list),list)
					printk("Pattern: %s\n",test->pattr);
				err=0;
					
				goto out;
			
		
		case AMFS_DEL_PATTERNS:
				printk("i am in del\n");
				size=strlen((char *)arg);
                                tmp=(char *)kmalloc(size,GFP_KERNEL);
                                if(!tmp){
                                        err=-ENOMEM;
                                        goto out;
                                }
                                if(copy_from_user(tmp,(char*)arg,size)){
                                        err=-ENOMEM;
                                        goto out;
                                }
				tmp[size]='\0';
				printk("pattern to be deleted: %s\n",tmp);
				list_for_each_safe(pos,q,&(head->list)){
                                	test=list_entry(pos,struct pattern,list);
					if((strcmp(tmp,test->pattr))==0){
							list_del(pos);
                                        	}
                                }
				
				
				list_for_each_entry(test,&(head->list),list)
                                        printk("Pattern: %s\n",test->pattr);
                                err=0;
				
                                goto out;

		
		case AMFS_LIST_PATTERNS:
				printk("I am in list patterns\n");
				tmp=(char*)arg;
				list_for_each_entry(test,&(head->list),list){
					if(copy_to_user(tmp,test->pattr,strlen(test->pattr))){
						err=-ENOMEM;
						goto out;
					}
					tmp=tmp+strlen(test->pattr);
					if(copy_to_user(tmp,"\n",strlen("\n"))){
						err=-ENOMEM;
						goto out;
					}
					tmp=tmp+1;
				}
				err=0;
				goto out;

			default:
				printk("I am in default\n");
	
		}

	}

	else{
	if (lower_file->f_op->unlocked_ioctl)
		err = lower_file->f_op->unlocked_ioctl(lower_file, cmd, arg);
	}
	/* some ioctls can change inode attributes (EXT2_IOC_SETFLAGS) */
	if (!err)
		fsstack_copy_attr_all(file_inode(file),
				      file_inode(lower_file));
out:


	return err;
}

#ifdef CONFIG_COMPAT
static long amfs_compat_ioctl(struct file *file, unsigned int cmd,
				unsigned long arg)
{
	long err = -ENOTTY;
	struct file *lower_file;

	lower_file = amfs_lower_file(file);

	/* XXX: use vfs_ioctl if/when VFS exports it */
	if (!lower_file || !lower_file->f_op)
		goto out;
	if (lower_file->f_op->compat_ioctl)
		err = lower_file->f_op->compat_ioctl(lower_file, cmd, arg);

out:
	return err;
}
#endif

static int amfs_mmap(struct file *file, struct vm_area_struct *vma)
{
	int err = 0;
	bool willwrite;
	struct file *lower_file;
	const struct vm_operations_struct *saved_vm_ops = NULL;

	/* this might be deferred to mmap's writepage */
	willwrite = ((vma->vm_flags | VM_SHARED | VM_WRITE) == vma->vm_flags);

	/*
	 * File systems which do not implement ->writepage may use
	 * generic_file_readonly_mmap as their ->mmap op.  If you call
	 * generic_file_readonly_mmap with VM_WRITE, you'd get an -EINVAL.
	 * But we cannot call the lower ->mmap op, so we can't tell that
	 * writeable mappings won't work.  Therefore, our only choice is to
	 * check if the lower file system supports the ->writepage, and if
	 * not, return EINVAL (the same error that
	 * generic_file_readonly_mmap returns in that case).
	 */
	lower_file = amfs_lower_file(file);
	if (willwrite && !lower_file->f_mapping->a_ops->writepage) {
		err = -EINVAL;
		printk(KERN_ERR "amfs: lower file system does not "
		       "support writeable mmap\n");
		goto out;
	}

	/*
	 * find and save lower vm_ops.
	 *
	 * XXX: the VFS should have a cleaner way of finding the lower vm_ops
	 */
	if (!AMFS_F(file)->lower_vm_ops) {
		err = lower_file->f_op->mmap(lower_file, vma);
		if (err) {
			printk(KERN_ERR "amfs: lower mmap failed %d\n", err);
			goto out;
		}
		saved_vm_ops = vma->vm_ops; /* save: came from lower ->mmap */
	}

	/*
	 * Next 3 lines are all I need from generic_file_mmap.  I definitely
	 * don't want its test for ->readpage which returns -ENOEXEC.
	 */
	file_accessed(file);
	vma->vm_ops = &amfs_vm_ops;

	file->f_mapping->a_ops = &amfs_aops; /* set our aops */
	if (!AMFS_F(file)->lower_vm_ops) /* save for our ->fault */
		AMFS_F(file)->lower_vm_ops = saved_vm_ops;

out:
	return err;
}

static int amfs_open(struct inode *inode, struct file *file)
{
	printk("I am in amfs_open\n");
	int err = 0;
	struct file *lower_file = NULL;
	struct path lower_path;

	/* don't open unhashed/deleted files */
	if (d_unhashed(file->f_path.dentry)) {
		err = -ENOENT;
		goto out_err;
	}

	file->private_data =
		kzalloc(sizeof(struct amfs_file_info), GFP_KERNEL);
	if (!AMFS_F(file)) {
		err = -ENOMEM;
		goto out_err;
	}

	/* open lower object and link amfs's file struct to lower's */
	amfs_get_lower_path(file->f_path.dentry, &lower_path);
	lower_file = dentry_open(&lower_path, file->f_flags, current_cred());
	path_put(&lower_path);
	if (IS_ERR(lower_file)) {
		err = PTR_ERR(lower_file);
		lower_file = amfs_lower_file(file);
		if (lower_file) {
			amfs_set_lower_file(file, NULL);
			fput(lower_file); /* fput calls dput for lower_dentry */
		}
	} else {
		amfs_set_lower_file(file, lower_file);
	}

	if (err)
		kfree(AMFS_F(file));
	else
		fsstack_copy_attr_all(inode, amfs_lower_inode(inode));
out_err:
	return err;
}

static int amfs_flush(struct file *file, fl_owner_t id)
{
	int err = 0;
	struct file *lower_file = NULL;

	lower_file = amfs_lower_file(file);
	if (lower_file && lower_file->f_op && lower_file->f_op->flush) {
		filemap_write_and_wait(file->f_mapping);
		err = lower_file->f_op->flush(lower_file, id);
	}

	return err;
}

/* release all lower object references & free the file info structure */
static int amfs_file_release(struct inode *inode, struct file *file)
{
	struct file *lower_file;

	lower_file = amfs_lower_file(file);
	if (lower_file) {
		amfs_set_lower_file(file, NULL);
		fput(lower_file);
	}

	kfree(AMFS_F(file));
	return 0;
}

static int amfs_fsync(struct file *file, loff_t start, loff_t end,
			int datasync)
{
	int err;
	struct file *lower_file;
	struct path lower_path;
	struct dentry *dentry = file->f_path.dentry;

	err = __generic_file_fsync(file, start, end, datasync);
	if (err)
		goto out;
	lower_file = amfs_lower_file(file);
	amfs_get_lower_path(dentry, &lower_path);
	err = vfs_fsync_range(lower_file, start, end, datasync);
	amfs_put_lower_path(dentry, &lower_path);
out:
	return err;
}

static int amfs_fasync(int fd, struct file *file, int flag)
{
	int err = 0;
	struct file *lower_file = NULL;

	lower_file = amfs_lower_file(file);
	if (lower_file->f_op && lower_file->f_op->fasync)
		err = lower_file->f_op->fasync(fd, lower_file, flag);

	return err;
}

static ssize_t amfs_aio_read(struct kiocb *iocb, const struct iovec *iov,
			       unsigned long nr_segs, loff_t pos)
{
	int err = -EINVAL;
	struct file *file, *lower_file;

	file = iocb->ki_filp;
	lower_file = amfs_lower_file(file);
	if (!lower_file->f_op->aio_read)
		goto out;
	/*
	 * It appears safe to rewrite this iocb, because in
	 * do_io_submit@fs/aio.c, iocb is a just copy from user.
	 */
	get_file(lower_file); /* prevent lower_file from being released */
	iocb->ki_filp = lower_file;
	err = lower_file->f_op->aio_read(iocb, iov, nr_segs, pos);
	iocb->ki_filp = file;
	fput(lower_file);
	/* update upper inode atime as needed */
	if (err >= 0 || err == -EIOCBQUEUED)
		fsstack_copy_attr_atime(file->f_path.dentry->d_inode,
					file_inode(lower_file));
out:
	return err;
}

static ssize_t amfs_aio_write(struct kiocb *iocb, const struct iovec *iov,
				unsigned long nr_segs, loff_t pos)
{
	int err = -EINVAL;
	struct file *file, *lower_file;

	file = iocb->ki_filp;
	lower_file = amfs_lower_file(file);
	if (!lower_file->f_op->aio_write)
		goto out;
	/*
	 * It appears safe to rewrite this iocb, because in
	 * do_io_submit@fs/aio.c, iocb is a just copy from user.
	 */
	get_file(lower_file); /* prevent lower_file from being released */
	iocb->ki_filp = lower_file;
	err = lower_file->f_op->aio_write(iocb, iov, nr_segs, pos);
	iocb->ki_filp = file;
	fput(lower_file);
	/* update upper inode times/sizes as needed */
	if (err >= 0 || err == -EIOCBQUEUED) {
		fsstack_copy_inode_size(file->f_path.dentry->d_inode,
					file_inode(lower_file));
		fsstack_copy_attr_times(file->f_path.dentry->d_inode,
					file_inode(lower_file));
	}
out:
	return err;
}

/*
 * Wrapfs cannot use generic_file_llseek as ->llseek, because it would
 * only set the offset of the upper file.  So we have to implement our
 * own method to set both the upper and lower file offsets
 * consistently.
 */
static loff_t amfs_file_llseek(struct file *file, loff_t offset, int whence)
{
	int err;
	struct file *lower_file;

	err = generic_file_llseek(file, offset, whence);
	if (err < 0)
		goto out;

	lower_file = amfs_lower_file(file);
	err = generic_file_llseek(lower_file, offset, whence);

out:
	return err;
}

/*
 * Wrapfs read_iter, redirect modified iocb to lower read_iter
 */
ssize_t
amfs_read_iter(struct kiocb *iocb, struct iov_iter *iter)
{
	int err;
	struct file *file = iocb->ki_filp, *lower_file;

	lower_file = amfs_lower_file(file);
	if (!lower_file->f_op->read_iter) {
		err = -EINVAL;
		goto out;
	}

	get_file(lower_file); /* prevent lower_file from being released */
	iocb->ki_filp = lower_file;
	err = lower_file->f_op->read_iter(iocb, iter);
	iocb->ki_filp = file;
	fput(lower_file);
	/* update upper inode atime as needed */
	if (err >= 0 || err == -EIOCBQUEUED)
		fsstack_copy_attr_atime(file->f_path.dentry->d_inode,
					file_inode(lower_file));
out:
	return err;
}

/*
 * Wrapfs write_iter, redirect modified iocb to lower write_iter
 */
ssize_t
amfs_write_iter(struct kiocb *iocb, struct iov_iter *iter)
{
	int err;
	struct file *file = iocb->ki_filp, *lower_file;

	lower_file = amfs_lower_file(file);
	if (!lower_file->f_op->write_iter) {
		err = -EINVAL;
		goto out;
	}

	get_file(lower_file); /* prevent lower_file from being released */
	iocb->ki_filp = lower_file;
	err = lower_file->f_op->write_iter(iocb, iter);
	iocb->ki_filp = file;
	fput(lower_file);
	/* update upper inode times/sizes as needed */
	if (err >= 0 || err == -EIOCBQUEUED) {
		fsstack_copy_inode_size(file->f_path.dentry->d_inode,
					file_inode(lower_file));
		fsstack_copy_attr_times(file->f_path.dentry->d_inode,
					file_inode(lower_file));
	}
out:
	return err;
}

const struct file_operations amfs_main_fops = {
	.llseek		= generic_file_llseek,
	.read		= amfs_read,
	.write		= amfs_write,
	.unlocked_ioctl	= amfs_unlocked_ioctl,
#ifdef CONFIG_COMPAT
	.compat_ioctl	= amfs_compat_ioctl,
#endif
	.mmap		= amfs_mmap,
	.open		= amfs_open,
	.flush		= amfs_flush,
	.release	= amfs_file_release,
	.fsync		= amfs_fsync,
	.fasync		= amfs_fasync,
	.aio_read	= amfs_aio_read,
	.aio_write	= amfs_aio_write,
	.read_iter	= amfs_read_iter,
	.write_iter	= amfs_write_iter,
};

/* trimmed directory options */
const struct file_operations amfs_dir_fops = {
	.llseek		= amfs_file_llseek,
	.read		= generic_read_dir,
	.iterate	= amfs_readdir,
	.unlocked_ioctl	= amfs_unlocked_ioctl,
#ifdef CONFIG_COMPAT
	.compat_ioctl	= amfs_compat_ioctl,
#endif
	.open		= amfs_open,
	.release	= amfs_file_release,
	.flush		= amfs_flush,
	.fsync		= amfs_fsync,
	.fasync		= amfs_fasync,
};
